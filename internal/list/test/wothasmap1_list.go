// Generated by: setup
// TypeWriter: List
// Directive: +test on WotHasMap1

package main

import (
	"bytes"
	"fmt"
	"math/rand"
)

//-------------------------------------------------------------------------------------------------

// WotHasMap1Collection is an interface for collections of type WotHasMap1, including sets, lists and options (where present).
type WotHasMap1Collection interface {
	// Size gets the size/length of the collection.
	Size() int

	// IsEmpty returns true if the collection is empty.
	IsEmpty() bool

	// NonEmpty returns true if the collection is non-empty.
	NonEmpty() bool

	// IsSequence returns true for lists, but false otherwise.
	IsSequence() bool

	// IsSet returns true for sets, but false otherwise.
	IsSet() bool

	// Head returns the first element of a list or an arbitrary element of a set or the contents of an option.
	// Panics if the collection is empty.
	Head() WotHasMap1

	// ToSlice returns a plain slice containing all the elements in the collection. This is useful for bespoke iteration etc.
	// For sequences, the order of the elements is simple and well defined.
	// For non-sequences (i.e. sets) the order of the elements is stable but not well defined. This means it will give
	// the same order each subsequent time it is used as it did the first time.
	ToSlice() []WotHasMap1

	// ToList gets all the elements in a List.
	ToList() WotHasMap1List

	// Send sends all elements along a channel of type WotHasMap1.
	// For sequences, the order of the elements is simple and well defined.
	// For non-sequences (i.e. sets) the order of the elements is stable but not well defined. This means it will give
	// the same order each subsequent time it is used as it did the first time.
	Send() <-chan WotHasMap1

	// Exists returns true if there exists at least one element in the collection that matches
	// the predicate supplied.
	Exists(predicate func(WotHasMap1) bool) bool

	// Forall returns true if every element in the collection matches the predicate supplied.
	Forall(predicate func(WotHasMap1) bool) bool

	// Foreach iterates over every element, executing a supplied function against each.
	Foreach(fn func(WotHasMap1))

	// Filter returns a new WotHasMap1Collection whose elements return true for a predicate function.
	// The relative order of the elements in the result is the same as in the
	// original collection.
	Filter(predicate func(WotHasMap1) bool) (result WotHasMap1Collection)

	// Partition returns two new WotHasMap1Collections whose elements return true or false for the predicate, p.
	// The first consists of all elements that satisfy the predicate and the second consists of
	// all elements that don't. The relative order of the elements in the results is the same as in the
	// original collection.
	Partition(p func(WotHasMap1) bool) (matching WotHasMap1Collection, others WotHasMap1Collection)

	// Min returns an element of WotHasMap1List containing the minimum value, when compared to other elements
	// using a specified comparator function defining ‘less’. For ordered sequences, Min returns the first such element.
	// Panics if the collection is empty.
	Min(less func(WotHasMap1, WotHasMap1) bool) WotHasMap1

	// Max returns an element of WotHasMap1List containing the maximum value, when compared to other elements
	// using a specified comparator function defining ‘less’. For ordered sequences, Max returns the first such element.
	// Panics if the collection is empty.
	Max(less func(WotHasMap1, WotHasMap1) bool) WotHasMap1

	// String gets a string representation of the collection. "[" and "]" surround
	// a comma-separated list of the elements.
	String() string

	// MkString gets a string representation of the collection. "[" and "]" surround a list
	// of the elements joined by the separator you provide.
	MkString(sep string) string

	// MkString3 gets a string representation of the collection. 'pfx' and 'sfx' surround a list
	// of the elements joined by the 'mid' separator you provide.
	MkString3(pfx, mid, sfx string) string
}

//-------------------------------------------------------------------------------------------------

// WotHasMap1List is a slice of type WotHasMap1. Use it where you would use []WotHasMap1.
// List values follow a similar pattern to Scala Lists and LinearSeqs in particular.
// Importantly, *none of its methods ever mutate a list*; they merely return new lists where required.
// When a list needs mutating, use normal Go slice operations, e.g. *append()*.
// For comparison with Scala, see e.g. http://www.scala-lang.org/api/2.11.7/#scala.collection.LinearSeq
type WotHasMap1List []WotHasMap1

//-------------------------------------------------------------------------------------------------

// NewWotHasMap1List constructs a new list containing the supplied values, if any.
func NewWotHasMap1List(values ...WotHasMap1) WotHasMap1List {
	list := make(WotHasMap1List, len(values))
	for i, v := range values {
		list[i] = v
	}
	return list
}

// BuildWotHasMap1ListFromChan constructs a new WotHasMap1List from a channel that supplies a sequence
// of values until it is closed. The function doesn't return until then.
func BuildWotHasMap1ListFromChan(source <-chan WotHasMap1) WotHasMap1List {
	result := make(WotHasMap1List, 0)
	for v := range source {
		result = append(result, v)
	}
	return result
}

//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------

// Head gets the first element in the list. Head plus Tail include the whole list. Head is the opposite of Last.
// Panics if list is empty
func (list WotHasMap1List) Head() WotHasMap1 {
	return list[0]
}

// Last gets the last element in the list. Init plus Last include the whole list. Last is the opposite of Head.
// Panics if list is empty
func (list WotHasMap1List) Last() WotHasMap1 {
	return list[len(list)-1]
}

// Tail gets everything except the head. Head plus Tail include the whole list. Tail is the opposite of Init.
// Panics if list is empty
func (list WotHasMap1List) Tail() WotHasMap1Collection {
	return WotHasMap1List(list[1:])
}

// Init gets everything except the last. Init plus Last include the whole list. Init is the opposite of Tail.
// Panics if list is empty
func (list WotHasMap1List) Init() WotHasMap1Collection {
	return WotHasMap1List(list[:len(list)-1])
}

// IsEmpty tests whether WotHasMap1List is empty.
func (list WotHasMap1List) IsEmpty() bool {
	return len(list) == 0
}

// NonEmpty tests whether WotHasMap1List is empty.
func (list WotHasMap1List) NonEmpty() bool {
	return len(list) > 0
}

// IsSequence returns true for lists.
func (list WotHasMap1List) IsSequence() bool {
	return true
}

// IsSet returns false for lists.
func (list WotHasMap1List) IsSet() bool {
	return false
}

//-------------------------------------------------------------------------------------------------

// ToSlice gets all the list's elements in a plain slice. This is simply a type conversion and is hardly needed
// for lists, because the underlying type can be used directly also.
// It is part of the WotHasMap1Collection interface.
func (list WotHasMap1List) ToSlice() []WotHasMap1 {
	return []WotHasMap1(list)
}

// ToList simply returns the list in this case, but is part of the Collection interface.
func (list WotHasMap1List) ToList() WotHasMap1List {
	return list
}

//-------------------------------------------------------------------------------------------------

// Size returns the number of items in the list - an alias of Len().
func (list WotHasMap1List) Size() int {
	return len(list)
}

// Len returns the number of items in the list - an alias of Size().
// This is one of the three methods in the standard sort.Interface.
func (list WotHasMap1List) Len() int {
	return len(list)
}

// Swap exchanges two elements, which is neceessary during sorting etc.
// This is one of the three methods in the standard sort.Interface.
func (list WotHasMap1List) Swap(i, j int) {
	list[i], list[j] = list[j], list[i]
}

//-------------------------------------------------------------------------------------------------

// Exists verifies that one or more elements of WotHasMap1List return true for the passed func.
func (list WotHasMap1List) Exists(fn func(WotHasMap1) bool) bool {
	for _, v := range list {
		if fn(v) {
			return true
		}
	}
	return false
}

// Forall verifies that all elements of WotHasMap1List return true for the passed func.
func (list WotHasMap1List) Forall(fn func(WotHasMap1) bool) bool {
	for _, v := range list {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Foreach iterates over WotHasMap1List and executes the passed func against each element.
func (list WotHasMap1List) Foreach(fn func(WotHasMap1)) {
	for _, v := range list {
		fn(v)
	}
}

// Send gets a channel that will send all the elements in order.
func (list WotHasMap1List) Send() <-chan WotHasMap1 {
	ch := make(chan WotHasMap1)
	go func() {
		for _, v := range list {
			ch <- v
		}
		close(ch)
	}()
	return ch
}

// Reverse returns a copy of WotHasMap1List with all elements in the reverse order.
func (list WotHasMap1List) Reverse() WotHasMap1List {
	numItems := len(list)
	result := make(WotHasMap1List, numItems)
	last := numItems - 1
	for i, v := range list {
		result[last-i] = v
	}
	return result
}

// Shuffle returns a shuffled copy of WotHasMap1List, using a version of the Fisher-Yates shuffle.
func (list WotHasMap1List) Shuffle() WotHasMap1List {
	numItems := len(list)
	result := make(WotHasMap1List, numItems)
	copy(result, list)
	for i := 0; i < numItems; i++ {
		r := i + rand.Intn(numItems-i)
		result.Swap(i, r)
	}
	return result
}

//-------------------------------------------------------------------------------------------------

// Take returns a new WotHasMap1List containing the leading n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list WotHasMap1List) Take(n int) WotHasMap1List {
	if n > len(list) {
		return list
	} else {
		return list[0:n]
	}
}

// Drop returns a new WotHasMap1List without the leading n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list WotHasMap1List) Drop(n int) WotHasMap1List {
	l := len(list)
	if n > l {
		return list[l:]
	} else {
		return list[n:]
	}
}

// TakeLast returns a new WotHasMap1List containing the trailing n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list WotHasMap1List) TakeLast(n int) WotHasMap1List {
	l := len(list)
	if n > l {
		return list
	} else {
		return list[l-n:]
	}
}

// DropLast returns a new WotHasMap1List without the trailing n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list WotHasMap1List) DropLast(n int) WotHasMap1List {
	l := len(list)
	if n > l {
		return list[l:]
	} else {
		return list[0 : l-n]
	}
}

// TakeWhile returns a new WotHasMap1List containing the leading elements of the source list. Whilst the
// predicate p returns true, elements are added to the result. Once predicate p returns false, all remaining
// elemense are excluded.
func (list WotHasMap1List) TakeWhile(p func(WotHasMap1) bool) (result WotHasMap1List) {
	for _, v := range list {
		if p(v) {
			result = append(result, v)
		} else {
			return
		}
	}
	return
}

// DropWhile returns a new WotHasMap1List containing the trailing elements of the source list. Whilst the
// predicate p returns true, elements are excluded from the result. Once predicate p returns false, all remaining
// elemense are added.
func (list WotHasMap1List) DropWhile(p func(WotHasMap1) bool) (result WotHasMap1List) {
	adding := false
	for _, v := range list {
		if !p(v) || adding {
			adding = true
			result = append(result, v)
		}
	}
	return
}

//-------------------------------------------------------------------------------------------------

// Filter returns a new WotHasMap1List whose elements return true for func.
func (list WotHasMap1List) Filter(fn func(WotHasMap1) bool) WotHasMap1Collection {
	result := make(WotHasMap1List, 0, len(list)/2)
	for _, v := range list {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Partition returns two new WotHasMap1Lists whose elements return true or false for the predicate, p.
// The first result consists of all elements that satisfy the predicate and the second result consists of
// all elements that don't. The relative order of the elements in the results is the same as in the
// original list.
func (list WotHasMap1List) Partition(p func(WotHasMap1) bool) (WotHasMap1Collection, WotHasMap1Collection) {
	matching := make(WotHasMap1List, 0, len(list)/2)
	others := make(WotHasMap1List, 0, len(list)/2)
	for _, v := range list {
		if p(v) {
			matching = append(matching, v)
		} else {
			others = append(others, v)
		}
	}
	return matching, others
}

// CountBy gives the number elements of WotHasMap1List that return true for the passed predicate.
func (list WotHasMap1List) CountBy(predicate func(WotHasMap1) bool) (result int) {
	for _, v := range list {
		if predicate(v) {
			result++
		}
	}
	return
}

// MinBy returns an element of WotHasMap1List containing the minimum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally minimal, the first such
// element is returned. Panics if there are no elements.
func (list WotHasMap1List) MinBy(less func(WotHasMap1, WotHasMap1) bool) (result WotHasMap1) {
	l := len(list)
	if l == 0 {
		panic("Cannot determine the minimum of an empty list.")
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// MaxBy returns an element of WotHasMap1List containing the maximum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally maximal, the first such
// element is returned. Panics if there are no elements.
func (list WotHasMap1List) MaxBy(less func(WotHasMap1, WotHasMap1) bool) (result WotHasMap1) {
	l := len(list)
	if l == 0 {
		panic("Cannot determine the maximum of an empty list.")
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[m], list[i]) {
			m = i
		}
	}
	result = list[m]
	return
}

// DistinctBy returns a new WotHasMap1List whose elements are unique, where equality is defined by a passed func.
func (list WotHasMap1List) DistinctBy(equal func(WotHasMap1, WotHasMap1) bool) (result WotHasMap1List) {
Outer:
	for _, v := range list {
		for _, r := range result {
			if equal(v, r) {
				continue Outer
			}
		}
		result = append(result, v)
	}
	return result
}

// IndexWhere finds the index of the first element satisfying some predicate. If none exists, -1 is returned.
func (list WotHasMap1List) IndexWhere(p func(WotHasMap1) bool) int {
	for i, v := range list {
		if p(v) {
			return i
		}
	}
	return -1
}

// IndexWhere2 finds the index of the first element satisfying some predicate at or after some start index.
// If none exists, -1 is returned.
func (list WotHasMap1List) IndexWhere2(p func(WotHasMap1) bool, from int) int {
	for i, v := range list {
		if i >= from && p(v) {
			return i
		}
	}
	return -1
}

// LastIndexWhere finds the index of the last element satisfying some predicate.
// If none exists, -1 is returned.
func (list WotHasMap1List) LastIndexWhere(p func(WotHasMap1) bool) int {
	for i := len(list) - 1; i >= 0; i-- {
		v := list[i]
		if p(v) {
			return i
		}
	}
	return -1
}

// LastIndexWhere2 finds the index of the last element satisfying some predicate at or after some start index.
// If none exists, -1 is returned.
func (list WotHasMap1List) LastIndexWhere2(p func(WotHasMap1) bool, before int) int {
	for i := len(list) - 1; i >= 0; i-- {
		v := list[i]
		if i <= before && p(v) {
			return i
		}
	}
	return -1
}

//-------------------------------------------------------------------------------------------------
// These methods are included when WotHasMap1 is not ordered.

// Min returns the first element containing the minimum value, when compared to other elements
// using a specified comparator function defining ‘less’.
// Panics if the collection is empty.
func (list WotHasMap1List) Min(less func(WotHasMap1, WotHasMap1) bool) (result WotHasMap1) {
	l := len(list)
	if l == 0 {
		panic("Cannot determine the minimum of an empty list.")
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// Max returns the first element containing the maximum value, when compared to other elements
// using a specified comparator function defining ‘less’.
// Panics if the collection is empty.
func (list WotHasMap1List) Max(less func(WotHasMap1, WotHasMap1) bool) (result WotHasMap1) {
	l := len(list)
	if l == 0 {
		panic("Cannot determine the maximum of an empty list.")
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[m], list[i]) {
			m = i
		}
	}
	result = list[m]
	return
}

//-------------------------------------------------------------------------------------------------

// String implements the Stringer interface to render the list as a comma-separated string enclosed in square brackets.
func (list WotHasMap1List) String() string {
	return list.MkString3("[", ",", "]")
}

// MkString concatenates the values as a string using a supplied separator. No enclosing marks are added.
func (list WotHasMap1List) MkString(sep string) string {
	return list.MkString3("", sep, "")
}

// MkString3 concatenates the values as a string, using the prefix, separator and suffix supplied.
func (list WotHasMap1List) MkString3(pfx, mid, sfx string) string {
	b := bytes.Buffer{}
	b.WriteString(pfx)
	l := len(list)
	if l > 0 {
		v := list[0]
		b.WriteString(fmt.Sprintf("%v", v))
		for i := 1; i < l; i++ {
			v := list[i]
			b.WriteString(mid)
			b.WriteString(fmt.Sprintf("%v", v))
		}
	}
	b.WriteString(sfx)
	return b.String()
}

// List flags: {Collection:false List:true Option:false Set:false Plumbing:false Tag:map[]}
