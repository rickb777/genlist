// Generated by: setup
// TypeWriter: List
// Directive: +test on Other

package main

import (
	"errors"
	"math/rand"
	"sort"
)

// OtherList is a slice of type Other. Use it where you would use []Other.
type OtherList []Other

// Len returns the number of items in the list.
// There is no Size() method; use Len() instead.
// This is one of the three methods in the standard sort.Interface.
func (list OtherList) Len() int {
	return len(list)
}

// Swap exchanges two elements, which is neceessary during sorting etc.
// This is one of the three methods in the standard sort.Interface.
func (list OtherList) Swap(i, j int) {
	list[i], list[j] = list[j], list[i]
}

// IsEmpty tests whether OtherList is empty.
func (list OtherList) IsEmpty() bool {
	return len(list) == 0
}

// NonEmpty tests whether OtherList is empty.
func (list OtherList) NonEmpty() bool {
	return len(list) > 0
}

// Exists verifies that one or more elements of OtherList return true for the passed func.
func (list OtherList) Exists(fn func(Other) bool) bool {
	for _, v := range list {
		if fn(v) {
			return true
		}
	}
	return false
}

// Forall verifies that all elements of OtherList return true for the passed func.
func (list OtherList) Forall(fn func(Other) bool) bool {
	for _, v := range list {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Foreach iterates over OtherList and executes the passed func against each element.
func (list OtherList) Foreach(fn func(Other)) {
	for _, v := range list {
		fn(v)
	}
}

// Filter returns a new OtherList whose elements return true for func.
func (list OtherList) Filter(fn func(Other) bool) (result OtherList) {
	for _, v := range list {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Partition returns two new OtherLists whose elements return true or false for the predicate, p.
// The first result consists of all elements that satisfy the predicate and the second result consists of
// all elements that don't. The relative order of the elements in the results is the same as in the
// original list.
func (list OtherList) Partition(p func(Other) bool) (matching OtherList, others OtherList) {
	for _, v := range list {
		if p(v) {
			matching = append(matching, v)
		} else {
			others = append(others, v)
		}
	}
	return
}

// Take returns a new OtherList containing the leading n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list OtherList) Take(n int) OtherList {
	if n > len(list) {
		return list
	} else {
		return list[0:n]
	}
}

// Drop returns a new OtherList without the leading n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list OtherList) Drop(n int) OtherList {
	l := len(list)
	if n > l {
		return list[l:]
	} else {
		return list[n:]
	}
}

// TakeLast returns a new OtherList containing the trailing n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list OtherList) TakeLast(n int) OtherList {
	l := len(list)
	if n > l {
		return list
	} else {
		return list[l-n:]
	}
}

// DropLast returns a new OtherList without the trailing n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list OtherList) DropLast(n int) OtherList {
	l := len(list)
	if n > l {
		return list[l:]
	} else {
		return list[0 : l-n]
	}
}

// TakeWhile returns a new OtherList containing the leading elements of the source list. Whilst the
// predicate p returns true, elements are added to the result. Once predicate p returns false, all remaining
// elemense are excluded.
func (list OtherList) TakeWhile(p func(Other) bool) (result OtherList) {
	for _, v := range list {
		if p(v) {
			result = append(result, v)
		} else {
			return
		}
	}
	return
}

// DropWhile returns a new OtherList containing the trailing elements of the source list. Whilst the
// predicate p returns true, elements are excluded from the result. Once predicate p returns false, all remaining
// elemense are added.
func (list OtherList) DropWhile(p func(Other) bool) (result OtherList) {
	adding := false
	for _, v := range list {
		if !p(v) || adding {
			adding = true
			result = append(result, v)
		}
	}
	return
}

// Reverse returns a copy of OtherList with all elements in the reverse order.
func (list OtherList) Reverse() OtherList {
	numItems := len(list)
	result := make(OtherList, numItems)
	last := numItems - 1
	for i, v := range list {
		result[last-i] = v
	}
	return result
}

// Shuffle returns a shuffled copy of OtherList, using a version of the Fisher-Yates shuffle. See: http://clipperhouse.github.io/gen/#Shuffle
func (list OtherList) Shuffle() OtherList {
	numItems := len(list)
	result := make(OtherList, numItems)
	copy(result, list)
	for i := 0; i < numItems; i++ {
		r := i + rand.Intn(numItems-i)
		result.Swap(i, r)
	}
	return result
}

// CountBy gives the number elements of OtherList that return true for the passed predicate.
func (list OtherList) CountBy(predicate func(Other) bool) (result int) {
	for _, v := range list {
		if predicate(v) {
			result++
		}
	}
	return
}

// MinBy returns an element of OtherList containing the minimum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally minimal, the first such
// element is returned. Returns error if no elements.
func (list OtherList) MinBy(less func(Other, Other) bool) (result Other, err error) {
	l := len(list)
	if l == 0 {
		err = errors.New("Cannot determine the MinBy of an empty list.")
		return
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// MaxBy returns an element of OtherList containing the maximum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally maximal, the last such
// element is returned. Returns error if no elements.
func (list OtherList) MaxBy(less func(Other, Other) bool) (result Other, err error) {
	l := len(list)
	if l == 0 {
		err = errors.New("Cannot determine the MaxBy of an empty list.")
		return
	}
	m := 0
	for i := 1; i < l; i++ {
		if list[i] != list[m] && !less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// DistinctBy returns a new OtherList whose elements are unique, where equality is defined by a passed func. See: http://clipperhouse.github.io/gen/#DistinctBy
func (list OtherList) DistinctBy(equal func(Other, Other) bool) (result OtherList) {
Outer:
	for _, v := range list {
		for _, r := range result {
			if equal(v, r) {
				continue Outer
			}
		}
		result = append(result, v)
	}
	return result
}

// Less determines whether one specified element is less than another specified element.
// This is one of the three methods in the standard sort.Interface.
func (list OtherList) Less(i, j int) bool {
	return list[i] < list[j]
}

// Min returns the minimum value of OtherList. In the case of multiple items being equally minimal,
// the first such element is returned. Returns error if no elements. See: http://clipperhouse.github.io/gen/#Min
func (list OtherList) Min() (result Other, err error) {
	if len(list) == 0 {
		err = errors.New("Cannot determine the Min of an empty list.")
		return
	}
	result = list[0]
	for _, v := range list {
		if v < result {
			result = v
		}
	}
	return
}

// Max returns the maximum value of OtherList. In the case of multiple items being equally maximal,
// the first such element is returned. Returns error if no elements. See: http://clipperhouse.github.io/gen/#Max
func (list OtherList) Max() (result Other, err error) {
	if len(list) == 0 {
		err = errors.New("Cannot determine the Max of an empty list.")
		return
	}
	result = list[0]
	for _, v := range list {
		if v > result {
			result = v
		}
	}
	return
}

// Sort returns a new ordered OtherList.
func (list OtherList) Sort() OtherList {
	result := make(OtherList, len(list))
	copy(result, list)
	sort.Sort(result)
	return result
}

// IsSorted reports whether OtherList is sorted.
func (list OtherList) IsSorted() bool {
	return sort.IsSorted(list)
}

// SortDesc returns a new reverse-ordered OtherList.
func (list OtherList) SortDesc() OtherList {
	result := make(OtherList, len(list))
	copy(result, list)
	sort.Sort(sort.Reverse(result))
	return result
}

// IsSortedDesc reports whether OtherList is reverse-sorted.
func (list OtherList) IsSortedDesc() bool {
	return sort.IsSorted(sort.Reverse(list))
}

// Sum sums Other elements in OtherList. See: http://clipperhouse.github.io/gen/#Sum
func (list OtherList) Sum() (result Other) {
	for _, v := range list {
		result += v
	}
	return
}

// Mean sums OtherList over all elements and divides by len(OtherList). See: http://clipperhouse.github.io/gen/#Mean
func (list OtherList) Mean() (Other, error) {
	var result Other

	l := len(list)
	if l == 0 {
		return result, errors.New("cannot determine Mean of zero-length OtherList")
	}
	for _, v := range list {
		result += v
	}
	result = result / Other(l)
	return result, nil
}

// Contains verifies that a given value is contained in OtherList.
func (list OtherList) Contains(value Other) bool {
	for _, v := range list {
		if v == value {
			return true
		}
	}
	return false
}

// Count gives the number elements of OtherList that match a certain value.
func (list OtherList) Count(value Other) (result int) {
	for _, v := range list {
		if v == value {
			result++
		}
	}
	return
}

// Distinct returns a new OtherList whose elements are unique. See: http://clipperhouse.github.io/gen/#Distinct
func (list OtherList) Distinct() (result OtherList) {
	appended := make(map[Other]bool)
	for _, v := range list {
		if !appended[v] {
			result = append(result, v)
			appended[v] = true
		}
	}
	return result
}
