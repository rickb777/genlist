// Generated by: setup
// TypeWriter: Set
// Directive: +test on Thing

package main

import (
	"bytes"
	"errors"
	"fmt"
)

// ThingCollection is an interface for collections of type Thing, including sets, lists and options (where present).
type ThingCollection interface {
	// Size gets the size/length of the sequence.
	Size() int

	// IsEmpty returns true if the sequence is empty.
	IsEmpty() bool

	// NonEmpty returns true if the sequence is non-empty.
	NonEmpty() bool
}

//-------------------------------------------------------------------------------------------------
// ThingSet is a typesafe set of Thing items. Instances are essentially immutable.
// The set-agebra functions Union, Intersection and Difference allow new variants to be constructed
// easily.
//
// The implementation is based on Go maps.

type ThingSet map[Thing]struct{}

//-------------------------------------------------------------------------------------------------

func NewThingSet(e ...Thing) ThingSet {
	set := make(map[Thing]struct{})
	for _, v := range e {
		set[v] = struct{}{}
	}
	return ThingSet(set)
}

func (set ThingSet) Size() int {
	return len(set)
}

func (set ThingSet) IsEmpty() bool {
	return len(set) == 0
}

func (set ThingSet) NonEmpty() bool {
	return len(set) > 0
}

// ToSlice gets all the elements in Set in a slice.
func (set ThingSet) ToSlice() []Thing {
	slice := make([]Thing, 0, len(set))
	for v := range set {
		slice = append(slice, v)
	}
	return slice
}

// Contains tests whether an item is already in the ThingSet.
func (set ThingSet) Contains(i Thing) bool {
	_, found := set[i]
	return found
}

// ContainsAll tests whether many items are all in the ThingSet.
func (set ThingSet) ContainsAll(i ...Thing) bool {
	for _, v := range i {
		if !set.Contains(v) {
			return false
		}
	}
	return true
}

// Equals determines if two sets are equal to each other.
// They are considered equal if both are the same size and both have the same items.
func (set ThingSet) Equals(other ThingSet) bool {
	if set.Size() != other.Size() {
		return false
	}
	for item := range set {
		if !other.Contains(item) {
			return false
		}
	}
	return true
}

// IsSubset determines if every item in the other set is in this set.
func (set ThingSet) IsSubset(other ThingSet) bool {
	for item := range set {
		if !other.Contains(item) {
			return false
		}
	}
	return true
}

// IsSuperset determines if every item of this set is in the other set.
func (set ThingSet) IsSuperset(other ThingSet) bool {
	return other.IsSubset(set)
}

// Union returns a new set with all items in both sets.
func (set ThingSet) Union(other ThingSet) ThingSet {
	union := NewThingSet()
	for item := range set {
		union[item] = struct{}{}
	}
	for item := range other {
		union[item] = struct{}{}
	}
	return union
}

// Intersect returns a new set with items that exist only in both sets.
func (set ThingSet) Intersect(other ThingSet) ThingSet {
	intersection := NewThingSet()
	// loop over the smaller set
	if set.Size() < other.Size() {
		for item := range set {
			if other.Contains(item) {
				intersection[item] = struct{}{}
			}
		}
	} else {
		for item := range other {
			if set.Contains(item) {
				intersection[item] = struct{}{}
			}
		}
	}
	return intersection
}

// Difference returns a new set with items in the current set but not in the other set
func (set ThingSet) Difference(other ThingSet) ThingSet {
	diffs := NewThingSet()
	for item := range set {
		if !other.Contains(item) {
			diffs[item] = struct{}{}
		}
	}
	return diffs
}

// Add creates a new set with elements added. This is similar to Union, but takes a slice of extra values.
func (set ThingSet) Add(others ...Thing) ThingSet {
	added := NewThingSet()
	for item := range set {
		added[item] = struct{}{}
	}
	for _, item := range others {
		added[item] = struct{}{}
	}
	return added
}

// Remove creates a new set with elements removed. This is similar to Difference, but takes a slice of unwanted values.
func (set ThingSet) Remove(unwanted ...Thing) ThingSet {
	removed := NewThingSet()
	for item := range set {
		removed[item] = struct{}{}
	}
	for _, item := range unwanted {
		delete(removed, item)
	}
	return removed
}

// Exists verifies that one or more elements of ThingSet return true for the passed func.
func (set ThingSet) Exists(fn func(Thing) bool) bool {
	for v := range set {
		if fn(v) {
			return true
		}
	}
	return false
}

// Forall verifies that all elements of ThingSet return true for the passed func.
func (set ThingSet) Forall(fn func(Thing) bool) bool {
	for v := range set {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Foreach iterates over ThingSet and executes the passed func against each element.
// The order of the elements is not well defined but is probably repeatably stable until the set is changed.
func (set ThingSet) Foreach(fn func(Thing)) {
	for v := range set {
		fn(v)
	}
}

// Iter sends all elements along a channel of type Thing.
// The order of the elements is not well defined but is probably repeatably stable until the set is changed.
func (set ThingSet) Iter() <-chan Thing {
	ch := make(chan Thing)
	go func() {
		for v := range set {
			ch <- v
		}
		close(ch)
	}()
	return ch
}

// Filter returns a new ThingSet whose elements return true for func.
func (set ThingSet) Filter(fn func(Thing) bool) ThingSet {
	result := make(map[Thing]struct{})
	for v := range set {
		if fn(v) {
			result[v] = struct{}{}
		}
	}
	return result
}

// Partition returns two new ThingLists whose elements return true or false for the predicate, p.
// The first result consists of all elements that satisfy the predicate and the second result consists of
// all elements that don't. The relative order of the elements in the results is the same as in the
// original set.
func (set ThingSet) Partition(p func(Thing) bool) (ThingSet, ThingSet) {
	matching := make(map[Thing]struct{})
	others := make(map[Thing]struct{})
	for v := range set {
		if p(v) {
			matching[v] = struct{}{}
		} else {
			others[v] = struct{}{}
		}
	}
	return matching, others
}

// CountBy gives the number elements of ThingSet that return true for the passed predicate.
func (set ThingSet) CountBy(predicate func(Thing) bool) (result int) {
	for v := range set {
		if predicate(v) {
			result++
		}
	}
	return
}

// MinBy returns an element of ThingSet containing the minimum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally minimal, the first such
// element is returned. Returns error if no elements.
func (set ThingSet) MinBy(less func(Thing, Thing) bool) (result Thing, err error) {
	l := len(set)
	if l == 0 {
		err = errors.New("Cannot determine the MinBy of an empty set.")
		return
	}
	first := true
	var min Thing
	for v := range set {
		if first {
			first = false
			min = v
		} else if less(min, v) {
			min = v
		}
	}
	return
}

// MaxBy returns an element of ThingSet containing the maximum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally maximal, the last such
// element is returned. Returns error if no elements.
func (set ThingSet) MaxBy(less func(Thing, Thing) bool) (result Thing, err error) {
	l := len(set)
	if l == 0 {
		err = errors.New("Cannot determine the MinBy of an empty set.")
		return
	}
	first := true
	var max Thing
	for v := range set {
		if first {
			first = false
			max = v
		} else if less(v, max) {
			max = v
		}
	}
	return
}

// String implements the Stringer interface to render the set as a comma-separated array.
func (set ThingSet) String() string {
	return set.MkString3("[", ",", "]")
}

// MkString concatenates the values as a string.
func (set ThingSet) MkString(sep string) string {
	return set.MkString3("", sep, "")
}

// MkString3 concatenates the values as a string.
func (set ThingSet) MkString3(pfx, mid, sfx string) string {
	b := bytes.Buffer{}
	b.WriteString(pfx)
	l := len(set)
	if l > 0 {
		sep := ""
		for v := range set {
			b.WriteString(sep)
			b.WriteString(fmt.Sprintf("%v", v))
			sep = mid
		}
	}
	b.WriteString(sfx)
	return b.String()
}

// Set flags: {Collection:false Sequence:false List:false Option:false Set:true}
