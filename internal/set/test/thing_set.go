// Generated by: setup
// TypeWriter: Set
// Directive: +test on Thing

package main

import (
	"bytes"
	"fmt"
)

//-------------------------------------------------------------------------------------------------
// ThingCollection is an interface for collections of type Thing, including sets, lists and options (where present).
type ThingCollection interface {
	// Size gets the size/length of the collection.
	Size() int

	// IsEmpty returns true if the collection is empty.
	IsEmpty() bool

	// NonEmpty returns true if the collection is non-empty.
	NonEmpty() bool

	// IsSequence returns true for lists, but false otherwise.
	IsSequence() bool

	// IsSet returns true for sets, but false otherwise.
	IsSet() bool

	// Head returns the first element of a list or an arbitrary element of a set or the contents of an option.
	// Panics if the collection is empty.
	Head() Thing

	//-------------------------------------------------------------------------
	// ToSlice returns a plain slice containing all the elements in the collection.
	// This is useful for bespoke iteration etc.
	// For sequences, the order is well defined.
	// For non-sequences (i.e. sets) the first time it is used, order of the elements is not well defined. But
	// the order is stable, which means it will give the same order each subsequent time it is used.
	ToSlice() []Thing

	// ToSet gets all the elements in a Set.
	ToSet() ThingSet

	// Send sends all elements along a channel of type Thing.
	// For sequences, the order is well defined.
	// For non-sequences (i.e. sets) the first time it is used, order of the elements is not well defined. But
	// the order is stable, which means it will give the same order each subsequent time it is used.
	Send() <-chan Thing

	//-------------------------------------------------------------------------
	// Exists returns true if there exists at least one element in the collection that matches
	// the predicate supplied.
	Exists(predicate func(Thing) bool) bool

	// Forall returns true if every element in the collection matches the predicate supplied.
	Forall(predicate func(Thing) bool) bool

	// Foreach iterates over every element, executing a supplied function against each.
	Foreach(fn func(Thing))

	//-------------------------------------------------------------------------
	// Filter returns a new ThingCollection whose elements return true for a predicate function.
	// The relative order of the elements in the result is the same as in the
	// original collection.
	Filter(predicate func(Thing) bool) (result ThingCollection)

	// Partition returns two new ThingCollections whose elements return true or false for the predicate, p.
	// The first consists of all elements that satisfy the predicate and the second consists of
	// all elements that don't. The relative order of the elements in the results is the same as in the
	// original collection.
	Partition(p func(Thing) bool) (matching ThingCollection, others ThingCollection)

	//-------------------------------------------------------------------------
	// Equals verifies that another ThingCollection has the same size and elements as this one. Also,
	// if the collection is a sequence, the order must be the same.
	// Omitted if Thing is not comparable.
	Equals(other ThingCollection) bool

	// Contains tests whether a given value is present in the collection.
	// Omitted if Thing is not comparable.
	Contains(value Thing) bool

	// Min returns an element of ThingList containing the minimum value, when compared to other elements
	// using a specified comparator function defining ‘less’. For ordered sequences, Min returns the first such element.
	// Panics if the collection is empty.
	Min(less func(Thing, Thing) bool) Thing

	// Max returns an element of ThingList containing the maximum value, when compared to other elements
	// using a specified comparator function defining ‘less’. For ordered sequences, Max returns the first such element.
	// Panics if the collection is empty.
	Max(less func(Thing, Thing) bool) Thing

	//-------------------------------------------------------------------------
	// String gets a string representation of the collection. "[" and "]" surround
	// a comma-separated list of the elements.
	String() string

	// MkString gets a string representation of the collection. "[" and "]" surround a list
	// of the elements joined by the separator you provide.
	MkString(sep string) string

	// MkString3 gets a string representation of the collection. 'pfx' and 'sfx' surround a list
	// of the elements joined by the 'mid' separator you provide.
	MkString3(pfx, mid, sfx string) string
}

//-------------------------------------------------------------------------------------------------
// ThingSet is a typesafe set of Thing items. Instances are essentially immutable.
// The set-agebra functions Union, Intersection and Difference allow new variants to be constructed
// easily.
//
// The implementation is based on Go maps.

type ThingSet map[Thing]struct{}

//-------------------------------------------------------------------------------------------------
// NewThingSet constructs a new set containing the supplied values, if any.
func NewThingSet(values ...Thing) ThingSet {
	set := make(map[Thing]struct{})
	for _, v := range values {
		set[v] = struct{}{}
	}
	return ThingSet(set)
}

// BuildThingSetFrom constructs a new ThingSet from a channel that supplies values
// until it is closed.
func BuildThingSetFrom(source <-chan Thing) ThingSet {
	set := make(map[Thing]struct{})
	for v := range source {
		set[v] = struct{}{}
	}
	return ThingSet(set)
}

//-------------------------------------------------------------------------------------------------

// IsSequence returns false for sets.
func (set ThingSet) IsSequence() bool {
	return false
}

// IsSet returns true for sets.
func (set ThingSet) IsSet() bool {
	return true
}

func (set ThingSet) Size() int {
	return len(set)
}

func (set ThingSet) IsEmpty() bool {
	return len(set) == 0
}

func (set ThingSet) NonEmpty() bool {
	return len(set) > 0
}

// Head gets an arbitrary element.
func (set ThingSet) Head() Thing {
	for v := range set {
		return v
	}
	panic("Set is empty")
}

// ToSlice gets all the set's elements in a plain slice.
func (set ThingSet) ToSlice() []Thing {
	slice := make([]Thing, set.Size())
	i := 0
	for v := range set {
		slice[i] = v
		i++
	}
	return slice
}

// ToSet gets the current set, which requires no further conversion.
func (set ThingSet) ToSet() ThingSet {
	return set
}

// Contains tests whether an item is already in the ThingSet.
func (set ThingSet) Contains(i Thing) bool {
	_, found := set[i]
	return found
}

// ContainsAll tests whether many items are all in the ThingSet.
func (set ThingSet) ContainsAll(i ...Thing) bool {
	for _, v := range i {
		if !set.Contains(v) {
			return false
		}
	}
	return true
}

func (set ThingSet) actualSubset(other ThingSet) bool {
	for item := range set {
		if !other.Contains(item) {
			return false
		}
	}
	return true
}

// Equals determines if two sets are equal to each other.
// They are considered equal if both are the same size and both have the same items.
func (set ThingSet) Equals(other ThingCollection) bool {
	otherSet, isSet := other.(ThingSet)
	return isSet && set.Size() == other.Size() && set.actualSubset(otherSet)
}

// IsSubset determines if every item in the other set is in this set.
func (set ThingSet) IsSubset(other ThingSet) bool {
	return set.Size() <= other.Size() && set.actualSubset(other)
}

// IsProperSubset determines if every item in the other set is in this set and this set is
// smaller than the other.
func (set ThingSet) IsProperSubset(other ThingSet) bool {
	return set.Size() < other.Size() && set.actualSubset(other)
}

// IsSuperset determines if every item of this set is in the other set.
func (set ThingSet) IsSuperset(other ThingSet) bool {
	return other.IsSubset(set)
}

// Union returns a new set with all items in both sets.
func (set ThingSet) Union(other ThingSet) ThingSet {
	union := NewThingSet()
	for item := range set {
		union[item] = struct{}{}
	}
	for item := range other {
		union[item] = struct{}{}
	}
	return union
}

// Intersection returns a new set with items that exist only in both sets.
func (set ThingSet) Intersection(other ThingSet) ThingSet {
	intersection := NewThingSet()
	// loop over the smaller set
	if set.Size() < other.Size() {
		for item := range set {
			if other.Contains(item) {
				intersection[item] = struct{}{}
			}
		}
	} else {
		for item := range other {
			if set.Contains(item) {
				intersection[item] = struct{}{}
			}
		}
	}
	return intersection
}

// Difference returns a new set with items in the current set but not in the other set
func (set ThingSet) Difference(other ThingSet) ThingSet {
	diffs := NewThingSet()
	for item := range set {
		if !other.Contains(item) {
			diffs[item] = struct{}{}
		}
	}
	return diffs
}

// Add creates a new set with elements added. This is similar to Union, but takes a slice of extra values.
// The receiver is not modified.
func (set ThingSet) Add(others ...Thing) ThingSet {
	added := NewThingSet()
	for item := range set {
		added[item] = struct{}{}
	}
	for _, item := range others {
		added[item] = struct{}{}
	}
	return added
}

// Remove creates a new set with elements removed. This is similar to Difference, but takes a slice of unwanted values.
// The receiver is not modified.
func (set ThingSet) Remove(unwanted ...Thing) ThingSet {
	removed := NewThingSet()
	for item := range set {
		removed[item] = struct{}{}
	}
	for _, item := range unwanted {
		delete(removed, item)
	}
	return removed
}

// Exists verifies that one or more elements of ThingSet return true for the passed func.
func (set ThingSet) Exists(fn func(Thing) bool) bool {
	for v := range set {
		if fn(v) {
			return true
		}
	}
	return false
}

// Forall verifies that all elements of ThingSet return true for the passed func.
func (set ThingSet) Forall(fn func(Thing) bool) bool {
	for v := range set {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Foreach iterates over ThingSet and executes the passed func against each element.
// The order of the elements is not well defined but is probably repeatably stable until the set is changed.
func (set ThingSet) Foreach(fn func(Thing)) {
	for v := range set {
		fn(v)
	}
}

// Send sends all elements along a channel of type Thing.
// The order of the elements is not well defined but is probably repeatably stable until the set is changed.
func (set ThingSet) Send() <-chan Thing {
	ch := make(chan Thing)
	go func() {
		for v := range set {
			ch <- v
		}
		close(ch)
	}()
	return ch
}

// Filter returns a new ThingSet whose elements return true for func.
func (set ThingSet) Filter(fn func(Thing) bool) ThingCollection {
	result := make(map[Thing]struct{})
	for v := range set {
		if fn(v) {
			result[v] = struct{}{}
		}
	}
	return ThingSet(result)
}

// Partition returns two new ThingLists whose elements return true or false for the predicate, p.
// The first result consists of all elements that satisfy the predicate and the second result consists of
// all elements that don't. The relative order of the elements in the results is the same as in the
// original set.
func (set ThingSet) Partition(p func(Thing) bool) (ThingCollection, ThingCollection) {
	matching := make(map[Thing]struct{})
	others := make(map[Thing]struct{})
	for v := range set {
		if p(v) {
			matching[v] = struct{}{}
		} else {
			others[v] = struct{}{}
		}
	}
	return ThingSet(matching), ThingSet(others)
}

// CountBy gives the number elements of ThingSet that return true for the passed predicate.
func (set ThingSet) CountBy(predicate func(Thing) bool) (result int) {
	for v := range set {
		if predicate(v) {
			result++
		}
	}
	return
}

// MinBy returns an element of ThingSet containing the minimum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally minimal, the first such
// element is returned. Panics if there are no elements.
func (set ThingSet) MinBy(less func(Thing, Thing) bool) (result Thing) {
	l := len(set)
	if l == 0 {
		panic("Cannot determine the minimum of an empty set.")
	}
	first := true
	for v := range set {
		if first {
			first = false
			result = v
		} else if less(v, result) {
			result = v
		}
	}
	return
}

// MaxBy returns an element of ThingSet containing the maximum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally maximal, the last such
// element is returned. Panics if there are no elements.
func (set ThingSet) MaxBy(less func(Thing, Thing) bool) (result Thing) {
	l := len(set)
	if l == 0 {
		panic("Cannot determine the maximum of an empty set.")
	}
	first := true
	for v := range set {
		if first {
			first = false
			result = v
		} else if less(result, v) {
			result = v
		}
	}
	return
}

//-------------------------------------------------------------------------------------------------
// These methods are included when Thing is not ordered.

// Min returns an element containing the minimum value, when compared to other elements
// using a specified comparator function defining ‘less’.
// Panics if the collection is empty.
func (set ThingSet) Min(less func(Thing, Thing) bool) (result Thing) {
	l := len(set)
	if l == 0 {
		panic("Cannot determine the minimum of an empty set.")
	}
	first := true
	for v := range set {
		if first {
			first = false
			result = v
		} else if less(v, result) {
			result = v
		}
	}
	return
}

// Max returns an element containing the maximum value, when compared to other elements
// using a specified comparator function defining ‘less’.
// Panics if the collection is empty.
func (set ThingSet) Max(less func(Thing, Thing) bool) (result Thing) {
	l := len(set)
	if l == 0 {
		panic("Cannot determine the maximum of an empty set.")
	}
	first := true
	for v := range set {
		if first {
			first = false
			result = v
		} else if less(result, v) {
			result = v
		}
	}
	return
}

// String implements the Stringer interface to render the set as a comma-separated array.
func (set ThingSet) String() string {
	return set.MkString3("[", ",", "]")
}

// MkString concatenates the values as a string.
func (set ThingSet) MkString(sep string) string {
	return set.MkString3("", sep, "")
}

// MkString3 concatenates the values as a string.
func (set ThingSet) MkString3(pfx, mid, sfx string) string {
	b := bytes.Buffer{}
	b.WriteString(pfx)
	l := len(set)
	if l > 0 {
		sep := ""
		for v := range set {
			b.WriteString(sep)
			b.WriteString(fmt.Sprintf("%v", v))
			sep = mid
		}
	}
	b.WriteString(sfx)
	return b.String()
}

// MapToNum1 transforms ThingSet to Num1Set.
func (set ThingSet) MapToNum1(fn func(Thing) Num1) Num1Collection {
	result := make(map[Num1]struct{})
	for v := range set {
		u := fn(v)
		result[u] = struct{}{}
	}
	return Num1Set(result)
}

// FlatMapToNum1 transforms ThingSet to Num1Set, by
// calling the supplied function on each of the enclosed set elements, and returning a new set.
func (set ThingSet) FlatMapToNum1(fn func(Thing) Num1Collection) Num1Collection {
	result := make(map[Num1]struct{})
	for a := range set {
		b := fn(a)
		b.Foreach(func(c Num1) {
			result[c] = struct{}{}
		})
	}
	return Num1Set(result)
}

// GroupByNum1 groups elements into a map keyed by Num1.
// This method requires Num1 be comparable.
func (set ThingSet) GroupByNum1(fn func(Thing) Num1) map[Num1]ThingSet {
	result := make(map[Num1]ThingSet)
	for v := range set {
		key := fn(v)
		group, exists := result[key]
		if !exists {
			group = NewThingSet()
		}
		group[v] = struct{}{}
		result[key] = group
	}
	return result
}

// MapToString transforms ThingSet to []string.
func (set ThingSet) MapToString(fn func(Thing) string) []string {
	result := make([]string, 0, len(set))
	for v := range set {
		u := fn(v)
		result = append(result, u)
	}
	return result
}

// FlatMapToString transforms ThingSet to []string, by repeatedly
// calling the supplied function and concatenating the results as a single flat slice.
func (set ThingSet) FlatMapToString(fn func(Thing) []string) []string {
	result := make([]string, 0, len(set))
	for v := range set {
		u := fn(v)
		if len(u) > 0 {
			result = append(result, u...)
		}
	}
	return result
}

// FoldLeftNum1 applies a binary operator to a start value and all elements of this set, going left to right.
// Note: the result is well-defined only if the operator function is associative and commutative.
func (set ThingSet) FoldLeftNum1(zero Num1, fn func(Num1, Thing) Num1) Num1 {
	sum := zero
	for v := range set {
		sum = fn(sum, v)
	}
	return sum
}

// FoldRightNum1 applies a binary operator to a start value and all elements of this set, going right to left.
// This is an alias for FoldLeftNum1.
// Note: the result is well-defined only if the operator function is associative and commutative.
func (set ThingSet) FoldRightNum1(zero Num1, fn func(Num1, Thing) Num1) Num1 {
	return set.FoldLeftNum1(zero, fn)
}

// SumNum1 sums Thing over elements in ThingSet.
// This method requires Thing be numeric.
func (set ThingSet) SumNum1(fn func(Thing) Num1) (result Num1) {
	for v := range set {
		result += fn(v)
	}
	return
}

// MeanNum1 sums Num1 over all elements and divides by len(ThingSet).
// This method requires Thing be numeric.
// Panics if there are no elements.
func (set ThingSet) MeanNum1(fn func(Thing) Num1) (result Num1) {
	l := len(set)
	if l == 0 {
		panic("Cannot determine the maximum of an empty set.")
		return
	}
	for v := range set {
		result += fn(v)
	}
	result = result / Num1(l)
	return
}

// MinByNum1 finds the first element which yields the smallest value measured by function fn.
// fn is usually called a projection or measuring function.
// Panics if there are no elements.
// This method requires Num1 be ordered.
func (set ThingSet) MinByNum1(fn func(Thing) Num1) (result Thing) {
	if len(set) == 0 {
		panic("Cannot determine the minimum of an empty set.")
	}
	var m Num1
	first := true
	for v := range set {
		f := fn(v)
		if first {
			first = false
			result = v
			m = f
		} else if m > f {
			result = v
			m = f
		}
	}
	return
}

// MaxByNum1 finds the first element which yields the largest value measured by function fn.
// fn is usually called a projection or measuring function.
// Panics if there are no elements.
// This method requires Num1 be ordered.
func (set ThingSet) MaxByNum1(fn func(Thing) Num1) (result Thing) {
	if len(set) == 0 {
		panic("Cannot determine the maximum of an empty set.")
	}
	var m Num1
	first := true
	for v := range set {
		f := fn(v)
		if first {
			first = false
			result = v
			m = f
		} else if m < f {
			result = v
			m = f
		}
	}
	return
}

// FoldLeftFoo applies a binary operator to a start value and all elements of this set, going left to right.
// Note: the result is well-defined only if the operator function is associative and commutative.
func (set ThingSet) FoldLeftFoo(zero Foo, fn func(Foo, Thing) Foo) Foo {
	sum := zero
	for v := range set {
		sum = fn(sum, v)
	}
	return sum
}

// FoldRightFoo applies a binary operator to a start value and all elements of this set, going right to left.
// This is an alias for FoldLeftFoo.
// Note: the result is well-defined only if the operator function is associative and commutative.
func (set ThingSet) FoldRightFoo(zero Foo, fn func(Foo, Thing) Foo) Foo {
	return set.FoldLeftFoo(zero, fn)
}

// MinByFoo finds the first element which yields the smallest value measured by function fn.
// fn is usually called a projection or measuring function.
// Panics if there are no elements.
// This method requires Foo be ordered.
func (set ThingSet) MinByFoo(fn func(Thing) Foo) (result Thing) {
	if len(set) == 0 {
		panic("Cannot determine the minimum of an empty set.")
	}
	var m Foo
	first := true
	for v := range set {
		f := fn(v)
		if first {
			first = false
			result = v
			m = f
		} else if m > f {
			result = v
			m = f
		}
	}
	return
}

// MaxByFoo finds the first element which yields the largest value measured by function fn.
// fn is usually called a projection or measuring function.
// Panics if there are no elements.
// This method requires Foo be ordered.
func (set ThingSet) MaxByFoo(fn func(Thing) Foo) (result Thing) {
	if len(set) == 0 {
		panic("Cannot determine the maximum of an empty set.")
	}
	var m Foo
	first := true
	for v := range set {
		f := fn(v)
		if first {
			first = false
			result = v
			m = f
		} else if m < f {
			result = v
			m = f
		}
	}
	return
}

// Set flags: {Collection:false Sequence:false List:false Option:false Set:true Tag:map[MapTo:true With:true]}
