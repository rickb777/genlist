// Generated by: setup
// TypeWriter: Option
// Directive: +test on Other

package main

// OtherSeq is an interface for sequences of type Other, including lists and options (where present).
type OtherSeq interface {
	// Len gets the size/length of the sequence.
	Len() int

	// IsEmpty returns true if the sequence is empty.
	IsEmpty() bool

	// NonEmpty returns true if the sequence is non-empty.
	NonEmpty() bool

	// Exists returns true if there exists at least one element in the sequence that matches
	// the predicate supplied.
	Exists(predicate func(Other) bool) bool

	// Forall returns true if every element in the sequence matches the predicate supplied.
	Forall(predicate func(Other) bool) bool

	// Foreach iterates over every element, executing a supplied function against each.
	Foreach(fn func(Other))

	// Filter returns a new OtherSeq whose elements return true for func.
	Filter(predicate func(Other) bool) (result OtherSeq)

	// Find searches for the first value that matches a given predicate. It may or may not find one.
	Find(predicate func(Other) bool) OptionalOther

	// Contains tests whether a given value is present in the sequence.
	// Omitted if Other is not comparable.
	Contains(value Other) bool

	// Count counts the number of times a given value occurs in the sequence.
	// Omitted if Other is not comparable.
	Count(value Other) int

	// Sum sums Other elements.
	// Omitted if Other is not numeric.
	Sum() Other
}

//-------------------------------------------------------------------------------------------------
// OptionalOther is an optional of type Other. Use it where you want to be explicit about
// the presence or absence of data.
//
// Optional values follow a similar pattern to Scala Options.
// See e.g. http://www.scala-lang.org/api/2.11.7/index.html#scala.Option

type OptionalOther struct {
	x *Other
}

var noneOther = OptionalOther{nil}

func NoOther() OptionalOther {
	return noneOther
}

func SomeOther(x Other) OptionalOther {

	return OptionalOther{&x}

}

//-------------------------------------------------------------------------------------------------

func (o OptionalOther) Get() Other {
	if o.IsEmpty() {
		panic("Attempt to access non-existent value")
	}
	return *o.x
}

func (o OptionalOther) GetOrElse(d func() Other) Other {
	if o.IsEmpty() {
		return d()
	}
	return *o.x
}

func (o OptionalOther) OrElse(alternative func() OptionalOther) OptionalOther {
	if o.IsEmpty() {
		return alternative()
	}
	return o
}

//----- OtherSeq Methods -----

func (o OptionalOther) Len() int {
	if o.IsEmpty() {
		return 0
	}
	return 1
}

func (o OptionalOther) IsEmpty() bool {
	return o.x == nil
}

func (o OptionalOther) NonEmpty() bool {
	return o.x != nil
}

func (o OptionalOther) Find(predicate func(Other) bool) OptionalOther {
	if o.IsEmpty() {
		return o
	}
	if predicate(*o.x) {
		return o
	}
	return noneOther
}

func (o OptionalOther) Exists(predicate func(Other) bool) bool {
	if o.IsEmpty() {
		return false
	}
	return predicate(*o.x)
}

func (o OptionalOther) Forall(predicate func(Other) bool) bool {
	if o.IsEmpty() {
		return true
	}
	return predicate(*o.x)
}

func (o OptionalOther) Foreach(fn func(Other)) {
	if o.NonEmpty() {
		fn(*o.x)
	}
}

func (o OptionalOther) Filter(predicate func(Other) bool) OtherSeq {
	return o.Find(predicate)
}

func (o OptionalOther) Contains(value Other) bool {
	if o.IsEmpty() {
		return false
	}
	return *(o.x) == value
}

func (o OptionalOther) Count(value Other) int {
	if o.Contains(value) {
		return 1
	}
	return 0
}

// Distinct returns a new OtherSeq whose elements are all unique. For options, this simply returns the receiver.
// Omitted if Other is not comparable.
func (o OptionalOther) Distinct() OtherSeq {
	return o
}

// Sum sums Other elements.
// Omitted if Other is not numeric.
func (o OptionalOther) Sum() Other {

	if o.IsEmpty() {
		return 0
	}
	return *(o.x)

}

// MapToFoo transforms OptionalOther to OptionalFoo.
func (o OptionalOther) MapToFoo(fn func(Other) Foo) OptionalFoo {
	if o.IsEmpty() {
		return NoFoo()
	}

	u := fn(*(o.x))

	return SomeFoo(u)
}
