// Generated by: setup
// TypeWriter: Option
// Directive: +test on Other

package main

// OptionalOther is an optional of type Other. Use it where you want to be explicit about
// the presence or absence of data.
//
// Optional values follow a similar pattern to Scala Options.
// See e.g. http://www.scala-lang.org/api/2.11.7/index.html#scala.Option

type OptionalOther interface {
	Get() Other
	GetOrElse(d func() Other) Other
	OrElse(alternative func() OptionalOther) OptionalOther
	Len() int
	IsEmpty() bool
	NonEmpty() bool
	Find(fn func(Other) bool) OptionalOther
	Exists(fn func(Other) bool) bool
	Forall(fn func(Other) bool) bool
	Foreach(fn func(Other))
	Filter(fn func(Other) bool) (result OptionalOther)
}

//-----------------------------------------------------------------------------

type SomeOther Other

// cross-check
var _ OptionalOther = new(SomeOther)

// Get returns the contained element if present. Otherwise it panics.
func (x SomeOther) Get() Other {
	return Other(x)
}

// GetOrElse returns the contained element if present. Otherwise it returns a default.
func (x SomeOther) GetOrElse(d func() Other) Other {
	return Other(x)
}

// OrElse returns this option if present. Otherwise it returns the alternative.
func (x SomeOther) OrElse(alternative func() OptionalOther) OptionalOther {
	return x
}

// Len returns 1
func (x SomeOther) Len() int {
	return 1
}

// IsEmpty returns false.
func (x SomeOther) IsEmpty() bool {
	return false
}

// NonEmpty returns true.
func (x SomeOther) NonEmpty() bool {
	return true
}

// Find returns the contained value if it matches the predicate.
func (x SomeOther) Find(predicate func(Other) bool) OptionalOther {
	if predicate(Other(x)) {
		return x
	}
	return NoOther()
}

// Exists verifies that one or more elements of SomeOther return true for the passed predicate.
func (x SomeOther) Exists(predicate func(Other) bool) bool {
	return predicate(Other(x))
}

// Forall verifies that all elements of OptionalOther return true for the passed predicate.
func (x SomeOther) Forall(predicate func(Other) bool) bool {
	return predicate(Other(x))
}

// Foreach iterates over OptionalOther and executes the passed function against each element.
func (x SomeOther) Foreach(fn func(Other)) {
	fn(Other(x))
}

// Filter returns a OptionalOther whose elements return true for a predicate.
func (x SomeOther) Filter(predicate func(Other) bool) OptionalOther {
	if predicate(Other(x)) {
		return x
	}
	return NoOther()
}

// Contains verifies that a given value is contained in OptionalOther.
func (v SomeOther) Contains(value Other) bool {
	if Other(v) == value {
		return true
	}
	return false
}

// Count gives the number elements of OptionalOther that match a certain value.
func (v SomeOther) Count(value Other) (result int) {
	if Other(v) == value {
		result++
	}
	return
}

//-----------------------------------------------------------------------------

type noOther struct{}

// cross-check
var _ OptionalOther = new(noOther)

func NoOther() OptionalOther {
	return noOther{}
}

// Get returns the contained element if present. Otherwise it panics.
func (x noOther) Get() Other {
	panic("Absent option - this indicates a promgramming error.")
}

// GetOrElse returns the contained element if present. Otherwise it returns a default.
func (x noOther) GetOrElse(d func() Other) Other {
	return d()
}

// OrElse returns this option if present. Otherwise it returns the alternative.
func (x noOther) OrElse(alternative func() OptionalOther) OptionalOther {
	return alternative()
}

// Len returns 0
func (x noOther) Len() int {
	return 0
}

// IsEmpty returns true.
func (x noOther) IsEmpty() bool {
	return true
}

// NonEmpty returns false.
func (x noOther) NonEmpty() bool {
	return false
}

// Find can never succeed so returns NoOther.
func (x noOther) Find(predicate func(Other) bool) OptionalOther {
	return x
}

// Exists can never succeed so returns false.
func (x noOther) Exists(predicate func(Other) bool) bool {
	return false
}

// Forall verifies that all elements of OptionalOther return true for the passed predicate, which
// is always true.
func (x noOther) Forall(predicate func(Other) bool) bool {
	return true
}

// Foreach iterates over OptionalOther and executes the passed function against each element. There
// aren't any, so it does nothing.
func (x noOther) Foreach(fn func(Other)) {
	// does nothing
}

// Filter returns a OptionalOther whose elements return true for a predicate.
func (x noOther) Filter(predicate func(Other) bool) (result OptionalOther) {
	return x
}

// Contains verifies that a given value is contained in OptionalOther.
func (v noOther) Contains(value Other) bool {
	return false
}

// Count gives the number elements of OptionalOther that match a certain value.
func (v noOther) Count(value Other) int {
	return 0
}
