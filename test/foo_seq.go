// Generated by: setup
// TypeWriter: Seq
// Directive: +test on Foo

package main

// FooSeq is an interface for sequences of type Foo.
type FooSeq interface {
	Len() int
	IsEmpty() bool
	NonEmpty() bool
	//Find(fn func(Foo) bool) OptionalFoo
	Exists(fn func(Foo) bool) bool
	Forall(fn func(Foo) bool) bool
	Foreach(fn func(Foo))
	//Filter(fn func(Foo) bool) (result FooSeq)
	ToList() FooList
}

// ToList converts an option to a list of zero or one item
func (x SomeFoo) ToList() FooList {
	return FooList{Foo(x)}
}

// ToList converts an option to a list of zero or one item
func (x noFoo) ToList() FooList {
	return FooList{}
}

// HeadOption converts an option to a list of zero or one item
func (list FooList) HeadOption() OptionalFoo {
	if len(list) == 0 {
		return SomeFoo(list[0])
	} else {
		return noFoo{}
	}
}

// Distinct returns a new FooList whose elements are unique.
func (v SomeFoo) Distinct() (result FooList) {
	result = append(result, Foo(v))
	return result
}

// Distinct returns a new FooList whose elements are unique.
func (v noFoo) Distinct() FooList {
	return FooList{}
}
