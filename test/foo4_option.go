// Generated by: setup
// TypeWriter: Option
// Directive: +test on *Foo4

package main

import (
	"errors"
	"math/rand"
)

// Sequence: Has {true true true}

// Foo4Seq is an interface for sequences of type *Foo4, including lists and options (where present).
type Foo4Seq interface {
	// Len gets the size/length of the sequence.
	Len() int

	// IsEmpty returns true if the sequence is empty.
	IsEmpty() bool

	// NonEmpty returns true if the sequence is non-empty.
	NonEmpty() bool

	// Exists returns true if there exists at least one element in the sequence that matches
	// the predictate supplied.
	Exists(predicate func(*Foo4) bool) bool

	// Forall returns true if every element in the sequence matches the predictate supplied.
	Forall(predicate func(*Foo4) bool) bool

	// Foreach iterates over every element, executing a supplied function against each.
	Foreach(fn func(*Foo4))

	// Filter returns a new Foo4Seq whose elements return true for func.
	Filter(predicate func(*Foo4) bool) (result Foo4Seq)

	// Find searches for the first value that matches a given predicate. It may or may not find one.
	Find(predicate func(*Foo4) bool) OptionalFoo4

	// Converts the sequence to a list. For lists, this is a no-op.
	ToList() Foo4List

	// Contains tests whether a given value is present in the sequence.
	Contains(value *Foo4) bool

	// Count counts the number of times a given value occurs in the sequence.
	Count(value *Foo4) int
}

// Optional: Has {true true true}
//-------------------------------------------------------------------------------------------------
// OptionalFoo4 is an optional of type *Foo4. Use it where you want to be explicit about
// the presence or absence of data.
//
// Optional values follow a similar pattern to Scala Options.
// See e.g. http://www.scala-lang.org/api/2.11.7/index.html#scala.Option

// *Foo4
// Foo4
// *Foo4
// Foo4
// Foo4

type OptionalFoo4 struct {
	x *Foo4
}

var noneFoo4 = OptionalFoo4{nil}

func NoFoo4() OptionalFoo4 {
	return noneFoo4
}

func SomeFoo4(x *Foo4) OptionalFoo4 {

	if x == nil {
		return noneFoo4
	}
	return OptionalFoo4{x}

}

//-------------------------------------------------------------------------------------------------

func (o OptionalFoo4) Get() *Foo4 {
	if o.IsEmpty() {
		panic("Attempt to access non-existent value")
	}
	return o.x
}

func (o OptionalFoo4) GetOrElse(d func() *Foo4) *Foo4 {
	if o.IsEmpty() {
		return d()
	}
	return o.x
}

func (o OptionalFoo4) OrElse(alternative func() OptionalFoo4) OptionalFoo4 {
	if o.IsEmpty() {
		return alternative()
	}
	return o
}

//----- Foo4Seq Methods -----

func (o OptionalFoo4) Len() int {
	if o.IsEmpty() {
		return 0
	}
	return 1
}

func (o OptionalFoo4) IsEmpty() bool {
	return o.x == nil
}

func (o OptionalFoo4) NonEmpty() bool {
	return o.x != nil
}

func (o OptionalFoo4) Find(predicate func(*Foo4) bool) OptionalFoo4 {
	if o.IsEmpty() {
		return o
	}
	if predicate(o.x) {
		return o
	}
	return noneFoo4
}

func (o OptionalFoo4) Exists(predicate func(*Foo4) bool) bool {
	if o.IsEmpty() {
		return false
	}
	return predicate(o.x)
}

func (o OptionalFoo4) Forall(predicate func(*Foo4) bool) bool {
	if o.IsEmpty() {
		return true
	}
	return predicate(o.x)
}

func (o OptionalFoo4) Foreach(fn func(*Foo4)) {
	if o.NonEmpty() {
		fn(o.x)
	}
}

func (o OptionalFoo4) Filter(predicate func(*Foo4) bool) Foo4Seq {
	return o.Find(predicate)
}

func (o OptionalFoo4) Contains(value *Foo4) bool {
	if *(o.x) == *value {
		return true
	}
	return false
}

func (o OptionalFoo4) Count(value *Foo4) (result int) {
	if o.Contains(value) {
		result++
	}
	return
}

func (o OptionalFoo4) ToList() Foo4List {
	if o.IsEmpty() {
		return Foo4List{}
	}

	return Foo4List{o.x}

}

// Sequence: Has {false true true}

// List: Has {false true true}
//-------------------------------------------------------------------------------------------------
// Foo4List is a slice of type *Foo4. Use it where you would use []*Foo4.
// List values follow a similar pattern to Scala Lists and LinearSeqs in particular.
// Importantly, *none of its methods ever mutate a list*; they merely return new lists where required.
// When a list needs mutating, use normal Go slice operations, e.g. *append()*.
// For comparison with Scala, see e.g. http://www.scala-lang.org/api/2.11.7/#scala.collection.LinearSeq
type Foo4List []*Foo4

//-------------------------------------------------------------------------------------------------

// Len returns the number of items in the list.
// There is no Size() method; use Len() instead.
// This is one of the three methods in the standard sort.Interface.
func (list Foo4List) Len() int {
	return len(list)
}

// Swap exchanges two elements, which is neceessary during sorting etc.
// This is one of the three methods in the standard sort.Interface.
func (list Foo4List) Swap(i, j int) {
	list[i], list[j] = list[j], list[i]
}

// IsEmpty tests whether Foo4List is empty.
func (list Foo4List) IsEmpty() bool {
	return len(list) == 0
}

// NonEmpty tests whether Foo4List is empty.
func (list Foo4List) NonEmpty() bool {
	return len(list) > 0
}

// ToList simply returns the list in this case, but is part of the Seq interface.
func (list Foo4List) ToList() Foo4List {
	return list
}

// Exists verifies that one or more elements of Foo4List return true for the passed func.
func (list Foo4List) Exists(fn func(*Foo4) bool) bool {
	for _, v := range list {
		if fn(v) {
			return true
		}
	}
	return false
}

// Forall verifies that all elements of Foo4List return true for the passed func.
func (list Foo4List) Forall(fn func(*Foo4) bool) bool {
	for _, v := range list {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Foreach iterates over Foo4List and executes the passed func against each element.
func (list Foo4List) Foreach(fn func(*Foo4)) {
	for _, v := range list {
		fn(v)
	}
}

// Reverse returns a copy of Foo4List with all elements in the reverse order.
func (list Foo4List) Reverse() Foo4List {
	numItems := len(list)
	result := make(Foo4List, numItems)
	last := numItems - 1
	for i, v := range list {
		result[last-i] = v
	}
	return result
}

// Shuffle returns a shuffled copy of Foo4List, using a version of the Fisher-Yates shuffle. See: http://clipperhouse.github.io/gen/#Shuffle
func (list Foo4List) Shuffle() Foo4List {
	numItems := len(list)
	result := make(Foo4List, numItems)
	copy(result, list)
	for i := 0; i < numItems; i++ {
		r := i + rand.Intn(numItems-i)
		result.Swap(i, r)
	}
	return result
}

// Take returns a new Foo4List containing the leading n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list Foo4List) Take(n int) Foo4List {
	if n > len(list) {
		return list
	} else {
		return list[0:n]
	}
}

// Drop returns a new Foo4List without the leading n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list Foo4List) Drop(n int) Foo4List {
	l := len(list)
	if n > l {
		return list[l:]
	} else {
		return list[n:]
	}
}

// TakeLast returns a new Foo4List containing the trailing n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list Foo4List) TakeLast(n int) Foo4List {
	l := len(list)
	if n > l {
		return list
	} else {
		return list[l-n:]
	}
}

// DropLast returns a new Foo4List without the trailing n elements of the source list.
// If n is greater than the size of the list, the whole list is returned.
func (list Foo4List) DropLast(n int) Foo4List {
	l := len(list)
	if n > l {
		return list[l:]
	} else {
		return list[0 : l-n]
	}
}

// TakeWhile returns a new Foo4List containing the leading elements of the source list. Whilst the
// predicate p returns true, elements are added to the result. Once predicate p returns false, all remaining
// elemense are excluded.
func (list Foo4List) TakeWhile(p func(*Foo4) bool) (result Foo4List) {
	for _, v := range list {
		if p(v) {
			result = append(result, v)
		} else {
			return
		}
	}
	return
}

// DropWhile returns a new Foo4List containing the trailing elements of the source list. Whilst the
// predicate p returns true, elements are excluded from the result. Once predicate p returns false, all remaining
// elemense are added.
func (list Foo4List) DropWhile(p func(*Foo4) bool) (result Foo4List) {
	adding := false
	for _, v := range list {
		if !p(v) || adding {
			adding = true
			result = append(result, v)
		}
	}
	return
}

// Filter returns a new Foo4List whose elements return true for func.
func (list Foo4List) Filter(fn func(*Foo4) bool) Foo4Seq {
	result := make(Foo4List, 0, len(list)/2)
	for _, v := range list {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Partition returns two new Foo4Lists whose elements return true or false for the predicate, p.
// The first result consists of all elements that satisfy the predicate and the second result consists of
// all elements that don't. The relative order of the elements in the results is the same as in the
// original list.
func (list Foo4List) Partition(p func(*Foo4) bool) (matching Foo4List, others Foo4List) {
	for _, v := range list {
		if p(v) {
			matching = append(matching, v)
		} else {
			others = append(others, v)
		}
	}
	return
}

// CountBy gives the number elements of Foo4List that return true for the passed predicate.
func (list Foo4List) CountBy(predicate func(*Foo4) bool) (result int) {
	for _, v := range list {
		if predicate(v) {
			result++
		}
	}
	return
}

// MinBy returns an element of Foo4List containing the minimum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally minimal, the first such
// element is returned. Returns error if no elements.
func (list Foo4List) MinBy(less func(*Foo4, *Foo4) bool) (result *Foo4, err error) {
	l := len(list)
	if l == 0 {
		err = errors.New("Cannot determine the MinBy of an empty list.")
		return
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// MaxBy returns an element of Foo4List containing the maximum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally maximal, the last such
// element is returned. Returns error if no elements.
func (list Foo4List) MaxBy(less func(*Foo4, *Foo4) bool) (result *Foo4, err error) {
	l := len(list)
	if l == 0 {
		err = errors.New("Cannot determine the MaxBy of an empty list.")
		return
	}
	m := 0
	for i := 1; i < l; i++ {
		if list[i] != list[m] && !less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// DistinctBy returns a new Foo4List whose elements are unique, where equality is defined by a passed func. See: http://clipperhouse.github.io/gen/#DistinctBy
func (list Foo4List) DistinctBy(equal func(*Foo4, *Foo4) bool) (result Foo4List) {
Outer:
	for _, v := range list {
		for _, r := range result {
			if equal(v, r) {
				continue Outer
			}
		}
		result = append(result, v)
	}
	return result
}

// These methods require *Foo4 be comparable.

// Contains verifies that a given value is contained in Foo4List.
func (list Foo4List) Contains(value *Foo4) bool {
	for _, v := range list {

		if *v == *value {
			return true
		}

	}
	return false
}

// Count gives the number elements of Foo4List that match a certain value.
func (list Foo4List) Count(value *Foo4) (result int) {
	for _, v := range list {

		if *v == *value {
			result++
		}

	}
	return
}

// Distinct returns a new Foo4List whose elements are unique.
func (list Foo4List) Distinct() (result Foo4List) {
	appended := make(map[Foo4]bool)
	for _, v := range list {

		if !appended[*v] {
			result = append(result, v)
			appended[*v] = true
		}

	}
	return result
}

// Min returns an element of Foo4List containing the minimum value, when compared to other elements using a passed func defining ‘less’. In the case of multiple items being equally minimal, the first such element is returned. Returns error if no elements. See: http://clipperhouse.github.io/gen/#MinBy
func (list Foo4List) Min(less func(*Foo4, *Foo4) bool) (result *Foo4, err error) {
	l := len(list)
	if l == 0 {
		err = errors.New("Cannot determine the Min of an empty list.")
		return
	}
	m := 0
	for i := 1; i < l; i++ {
		if less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// Max returns an element of Foo4List containing the maximum value, when compared to other elements
// using a passed func defining ‘less’. In the case of multiple items being equally maximal, the last such
// element is returned. Returns error if no elements. See: http://clipperhouse.github.io/gen/#MaxBy
func (list Foo4List) Max(less func(*Foo4, *Foo4) bool) (result *Foo4, err error) {
	l := len(list)
	if l == 0 {
		err = errors.New("Cannot determine the Max of an empty list.")
		return
	}
	m := 0
	for i := 1; i < l; i++ {
		if list[i] != list[m] && !less(list[i], list[m]) {
			m = i
		}
	}
	result = list[m]
	return
}

// optionForList

// First returns the first element that returns true for the passed func. Returns error if no elements return true. See: http://clipperhouse.github.io/gen/#First
func (list Foo4List) Find(fn func(*Foo4) bool) OptionalFoo4 {
	for _, v := range list {
		if fn(v) {
			//return SomeFoo4(v)
		}
	}
	return NoFoo4()
}

// HeadOption converts an option to a list of zero or one item
func (list Foo4List) HeadOption() OptionalFoo4 {
	if len(list) > 0 {
		return SomeFoo4(list[0])
	} else {
		return NoFoo4()
	}
}
